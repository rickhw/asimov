plugins {
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'java'
}

dependencies {
    // implementation project(':asimov-core')

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'

    // openapi
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'

    // rdb: mysql or maria, or pgsql
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // runtimeOnly 'com.mysql:mysql-connector-j'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

    // message queue
    implementation 'org.springframework.boot:spring-boot-starter-amqp'

    // cache: redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    
    // Add jjwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5' // for JSON processing

    implementation 'org.projectlombok:lombok:1.18.36'
    compileOnly 'org.projectlombok:lombok:1.18.36'
    annotationProcessor 'org.projectlombok:lombok:1.18.36'

    // template engine
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    
     // 測試相關依賴
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'com.jayway.jsonpath:json-path'  // 支持 jsonPath
    testImplementation 'org.hamcrest:hamcrest'          // Hamcrest 用於匹配

    // operation
    // implementation 'com.github.loki4j:loki-logback-appender:1.4.1'

    // metric
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // implementation 'io.github.cdimascio:dotenv-java:3.0.0'


}

group = 'com.gtcafe.asimov'
version = '1.1.0'
sourceCompatibility = '17'

def buildId = new Date().format("yyyyMMdd-HHmm")
def buildType = project.hasProperty('buildType') ? project.property('buildType') : 'dev'
def buildOs = 'uname -v'.execute().text.trim()
def buildSdk = 'java -version'.execute().text.trim()

// Git hash 取得（可選）
def gitHash = 'unknown'
try {
    def proc = 'git rev-parse --short HEAD'.execute()
    proc.in.eachLine { line -> gitHash = line.trim() }
} catch (ignored) {}

def replacements = [
    VERSION  : version,
    BUILD_ID  : buildId,
    BUILD_TYPE: buildType,
    HASH_CODE : gitHash,
    BUILD_SDK : System.getProperty("java.runtime.version") + " " + System.getProperty("java.vm.vendor"), // System.getProperty("java.version"),
    BUILD_OS : buildOs
]

processResources {
    filesMatching(['**/*.properties', '**/*.txt']) {
        filteringCharset = 'UTF-8'
        filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: replacements)
    }
}

bootJar {
    archiveBaseName.set(project.name)
    archiveVersion.set("v${version}-${buildType}-b${buildId}")
}

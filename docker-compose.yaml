services:
  app:
    build: ./asimov-webapi
    ports:
      - "8080:8080"
    networks:
      - monitoring

  api-gateway_apache-apisix:
    image: apache/apisix:${APISIX_IMAGE_TAG:-3.11.0-debian}
    # restart: always
    volumes:
      - ./api-gateway/config/config.standalone.yaml:/usr/local/apisix/conf/apisix.yaml:ro
    environment:
      - APISIX_STAND_ALONE=true
    ports:
      - "9180:9180" # Admin API
      - "9080:9080" # HTTP Proxy
      - "9443:9443" # HTTPS Proxy
    networks:
      - monitoring

  rdb_mysql:
    image: mysql:8.0  # MySQL 官方映像支援 ARM
    environment:
      MYSQL_DATABASE: asimov
      MYSQL_ROOT_PASSWORD: password
    ports:
      - "3306:3306"
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      timeout: 5s
      retries: 5
    volumes:
      - ./.docker-data/rdb_mysql:/var/lib/mysql
      # - ./init-scripts/init.ddl.sql:/docker-entrypoint-initdb.d/init.ddl.sql  # 加入初始化 SQL 檔案
    networks:
      - monitoring

  cache_redis:
    image: redis:7.2-alpine  # Redis 官方映像支援 ARM
    ports:
      - 6379:6379
    volumes:
      - ./.docker-data/cache_redis/.docker-data:/.docker-data
      - ./.docker-data/cache_redis/conf/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - monitoring

  queue_rabbitmq:
    image: rabbitmq:3.12-management-alpine  # RabbitMQ 官方映像支援 ARM
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - ./.docker-data/queue_rabbitmq/.docker-data:/var/lib/rabbitmq
      - ./.docker-data/queue_rabbitmq/log:/var/log/rabbitmq
      # - ./queue/init.sh:/docker-entrypoint-init.d/init_rabbitmq.sh
    environment:
      RABBITMQ_DEFAULT_USER: root
      RABBITMQ_DEFAULT_PASS: password
    # command: bash /docker-entrypoint-init.d/init_rabbitmq.sh
    networks:
      - monitoring

## -- adminer -- ##


  cache-adminer_phpRedisAdmin:
    image: erikdubbelboer/phpredisadmin:1.19  # 這個映像應該也能運行在 ARM 上
    ports:
      - 9998:80
    environment:
      REDIS_1_HOST: cache_redis
      REDIS_1_NAME: localhost
    networks:
      - monitoring

  rdb-adminer_phpmyadmin:
    image: phpmyadmin  # PhpMyAdmin 支援 ARM
    ports:
      - 9999:80
    links:
      - rdb_mysql:db
    depends_on:
      rdb_mysql:
        condition: service_healthy
    networks:
      - monitoring

## -- O11y: metric, log, trace -- ##

  search_elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.16.1
    # container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    networks:
      - monitoring

  dashboard_kibana:
    image: docker.elastic.co/kibana/kibana:8.16.1
    # container_name: kibana
    ports:
      - "5601:5601"
    depends_on:
      - search_elasticsearch
    networks:
      - monitoring

  metric_prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - monitoring
    depends_on:
      # - app
      - node-exporter

  dashboard_grafana:
    image: grafana/grafana:10.1.0
    # container_name: grafana
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"
    networks:
      - monitoring

  logshipper_webapi-filebeat:
    image: docker.elastic.co/beats/filebeat:7.17.26
    # container_name: logshipper_webapi
    volumes:
      - ./asimov-webapi/filebeat.yml:/usr/share/filebeat/filebeat.yml
      - ./asimov-webapi/logs:/logs
    depends_on:
      - search_elasticsearch
    networks:
      - monitoring

  node-exporter:
    image: prom/node-exporter:latest
    ports:
      - "9100:9100"
    networks:
      - monitoring
    # volumes:
    #   - /proc:/host/proc:ro
    #   - /sys:/host/sys:ro
    #   - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'


networks:
  monitoring:
    driver: bridge
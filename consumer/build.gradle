plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.0'
}

group = 'com.gtcafe.asimov'
version = '1.2.0'
sourceCompatibility = '17'

repositories {
    mavenCentral()
}

dependencies {
    implementation project(':core') // Consumer will depend on core module

    implementation 'org.springframework.boot:spring-boot-starter-web' // If consumer needs web functionalities (e.g., health check)

    // rdb: mysql or maria, or pgsql
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // runtimeOnly 'com.mysql:mysql-connector-j'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

    // message queue: rabbitmq
    implementation 'org.springframework.boot:spring-boot-starter-amqp'

    // cache: redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'


    // Add jjwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5' // for JSON processing

    implementation 'org.projectlombok:lombok:1.18.36'
    compileOnly 'org.projectlombok:lombok:1.18.36'
    annotationProcessor 'org.projectlombok:lombok:1.18.36'

    // metric
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

bootJar {
    enabled = true
}


def buildId = project.hasProperty('buildId') ? project.getProperty('buildId') : new Date().format("yyyyMMdd-HHmm")
def buildType = project.hasProperty('buildType') ? project.getProperty('buildType') : 'dev'
def gitHash = 'unknown'

try {
    def proc = 'git rev-parse --short HEAD'.execute()
    proc.in.eachLine { line -> gitHash = line.trim() }
} catch (ignored) {}

def replacements = [
    VERSION    : version,
    BUILD_ID   : buildId,
    BUILD_TYPE : buildType,
    HASH_CODE  : gitHash,
    BUILD_SDK  : System.getProperty("java.runtime.version") + " " + System.getProperty("java.vm.vendor"),
    BUILD_OS   : 'uname -v'.execute().text.trim()
]

processResources {
    filesMatching(['**/*.properties', '**/*.txt']) {
        filteringCharset = 'UTF-8'
        filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: replacements)
    }
}

// JAR 檔命名方式
bootJar {
    archiveBaseName.set(project.name)
    archiveVersion.set("v${version}-${buildType}-b${buildId}")
}

// 產生 meta.json 的 task
task generateMeta {
    doLast {
        def metaFile = file("$buildDir/meta.json")
        metaFile.text = groovy.json.JsonOutput.prettyPrint(groovy.json.JsonOutput.toJson([
            product  : 'asimov',
            name     : 'api-server',
            version  : version,
            buildId  : buildId,
            buildType: buildType,
            hash     : gitHash
        ]))
        println "✔ meta.json generated at: $metaFile"
    }
}

// 確保在 bootJar 之後執行
build.finalizedBy(generateMeta)

